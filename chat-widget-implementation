// File: /chat-widget/src/index.js
import './styles.css';
import { initializeChat } from './chat';

// Self-executing function to avoid global scope pollution
(function() {
  // Get bot ID from script tag
  const script = document.currentScript || (function() {
    const scripts = document.getElementsByTagName('script');
    return scripts[scripts.length - 1];
  })();
  
  const botId = script.getAttribute('data-bot-id');
  const apiUrl = script.getAttribute('data-api-url') || 'https://api.your-bot-builder.com';
  
  if (!botId) {
    console.error('Bot ID not provided. Please add a data-bot-id attribute to your script tag.');
    return;
  }
  
  // Load bot configuration
  const loadBotConfig = async () => {
    try {
      const response = await fetch(`${apiUrl}/api/chat/${botId}/config`);
      
      if (!response.ok) {
        throw new Error(`Failed to load bot config: ${response.statusText}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error loading bot configuration:', error);
      return null;
    }
  };
  
  // Initialize chat when document is fully loaded
  document.addEventListener('DOMContentLoaded', async () => {
    const botConfig = await loadBotConfig();
    
    if (botConfig) {
      initializeChat(botId, botConfig, apiUrl);
    } else {
      console.error('Failed to initialize chat widget: Bot configuration not available');
    }
  });
})();

// File: /chat-widget/src/chat.js
export const initializeChat = (botId, botConfig, apiUrl) => {
  // Create chat widget container
  const chatContainer = document.createElement('div');
  chatContainer.className = 'bb-chat-container';
  chatContainer.dataset.botId = botId;
  
  // Apply custom styling based on bot configuration
  if (botConfig.design) {
    const { primaryColor, secondaryColor, fontFamily, borderRadius, position } = botConfig.design;
    
    // Set CSS variables for styling
    document.documentElement.style.setProperty('--bb-primary-color', primaryColor);
    document.documentElement.style.setProperty('--bb-secondary-color', secondaryColor);
    document.documentElement.style.setProperty('--bb-font-family', fontFamily);
    document.documentElement.style.setProperty('--bb-border-radius', `${borderRadius}px`);
    
    // Set position
    chatContainer.dataset.position = position || 'bottom-right';
  }
  
  // Create chat button
  const chatButton = document.createElement('button');
  chatButton.className = 'bb-chat-button';
  chatButton.innerHTML = `
    <div class="bb-chat-button-icon">
      <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
      </svg>
    </div>
  `;
  
  // Create chat popup
  const chatPopup = document.createElement('div');
  chatPopup.className = 'bb-chat-popup';
  chatPopup.style.display = 'none';
  
  // Create chat header
  const chatHeader = document.createElement('div');
  chatHeader.className = 'bb-chat-header';
  
  // Add avatar if provided
  if (botConfig.avatarUrl) {
    const avatar = document.createElement('div');
    avatar.className = 'bb-chat-avatar';
    avatar.innerHTML = `<img src="${botConfig.avatarUrl}" alt="${botConfig.name}" />`;
    chatHeader.appendChild(avatar);
  }
  
  // Add bot info
  const botInfo = document.createElement('div');
  botInfo.className = 'bb-chat-bot-info';
  botInfo.innerHTML = `
    <div class="bb-chat-bot-name">${botConfig.name}</div>
    <div class="bb-chat-bot-status">Online</div>
  `;
  chatHeader.appendChild(botInfo);
  
  // Add close button
  const closeButton = document.createElement('button');
  closeButton.className = 'bb-chat-close-button';
  closeButton.innerHTML = `
    <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  `;
  chatHeader.appendChild(closeButton);
  
  // Create messages container
  const messagesContainer = document.createElement('div');
  messagesContainer.className = 'bb-chat-messages';
  
  // Create input area
  const inputArea = document.createElement('div');
  inputArea.className = 'bb-chat-input-area';
  
  const messageInput = document.createElement('input');
  messageInput.className = 'bb-chat-input';
  messageInput.type = 'text';
  messageInput.placeholder = 'Type your message...';
  
  const sendButton = document.createElement('button');
  sendButton.className = 'bb-chat-send-button';
  sendButton.innerHTML = `
    <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
      <line x1="22" y1="2" x2="11" y2="13"></line>
      <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
    </svg>
  `;
  
  inputArea.appendChild(messageInput);
  inputArea.appendChild(sendButton);
  
  // Assemble chat popup
  chatPopup.appendChild(chatHeader);
  chatPopup.appendChild(messagesContainer);
  chatPopup.appendChild(inputArea);
  
  // Append everything to the chat container
  chatContainer.appendChild(chatButton);
  chatContainer.appendChild(chatPopup);
  
  // Append chat container to document body
  document.body.appendChild(chatContainer);
  
  // State management
  let conversationId = null;
  
  // Handle chat button click (toggle popup)
  chatButton.addEventListener('click', () => {
    const isVisible = chatPopup.style.display === 'flex';
    chatPopup.style.display = isVisible ? 'none' : 'flex';
    
    // If opening the chat and no welcome message yet, add one
    if (!isVisible && messagesContainer.children.length === 0) {
      addBotMessage(botConfig.welcomeMessage || `Hi there! How can I help you today?`);
      
      // Auto-focus the input field
      setTimeout(() => {
        messageInput.focus();
      }, 300);
    }
  });
  
  // Handle close button click
  closeButton.addEventListener('click', (e) => {
    e.stopPropagation();
    chatPopup.style.display = 'none';
  });
  
  // Handle send button click
  sendButton.addEventListener('click', () => {
    sendMessage();
  });
  
  // Handle Enter key press in input field
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
  
  // Add a bot message to the chat
  const addBotMessage = (text) => {
    const messageElement = document.createElement('div');
    messageElement.className = 'bb-chat-message bb-bot-message';
    
    let messageContent = text;
    
    // Check if message contains HTML (for rich responses)
    if (text.includes('<') && text.includes('>')) {
      // Sanitize HTML here if needed
      messageContent = text;
    } else {
      // Convert URLs to links, replace newlines with <br>
      messageContent = text
        .replace(/https?:\/\/[^\s]+/g, url => `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`)
        .replace(/\n/g, '<br>');
    }
    
    messageElement.innerHTML = `
      <div class="bb-message-content">${messageContent}</div>
      <div class="bb-message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
    `;
    
    messagesContainer.appendChild(messageElement);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  };
  
  // Add a user message to the chat
  const addUserMessage = (text) => {
    const messageElement = document.createElement('div');
    messageElement.className = 'bb-chat-message bb-user-message';
    
    // Escape HTML, replace newlines with <br>
    const messageContent = text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/\n/g, '<br>');
    
    messageElement.innerHTML = `
      <div class="bb-message-content">${messageContent}</div>
      <div class="bb-message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
    `;
    
    messagesContainer.appendChild(messageElement);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  };
  
  // Show typing indicator
  const showTypingIndicator = () => {
    const typingElement = document.createElement('div');
    typingElement.className = 'bb-chat-message bb-bot-message bb-typing-indicator';
    typingElement.innerHTML = `
      <div class="bb-message-content">
        <div class="bb-typing-dots">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(typingElement);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return typingElement;
  };
  
  // Send a message to the bot
  const sendMessage = async () => {
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    // Clear input
    messageInput.value = '';
    
    // Add user message to chat
    addUserMessage(message);
    
    // Show typing indicator
    const typingIndicator = showTypingIndicator();
    
    try {
      // Send message to API
      const response = await fetch(`${apiUrl}/api/chat/${botId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message,
          conversationId
        })
      });
      
      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      // Remove typing indicator
      messagesContainer.removeChild(typingIndicator);
      
      // Add bot response to chat
      addBotMessage(data.message);
      
      // Store conversation ID for future messages
      conversationId = data.conversationId;
    } catch (error) {
      console.error('Error sending message:', error);
      
      // Remove typing indicator
      messagesContainer.removeChild(typingIndicator);
      
      // Add error message
      addBotMessage('Sorry, I encountered an error. Please try again later.');
    }
  };
};

// File: /chat-widget/src/styles.css
:root {
  --bb-primary-color: #1976D2;
  --bb-secondary-color: #FFFFFF;
  --bb-font-family: 'Inter', sans-serif;
  --bb-border-radius: 8px;
  --bb-text-color: #333333;
  --bb-background-color: #F5F7FA;
  --bb-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

/* Chat Container */
.bb-chat-container {
  position: fixed;
  z-index: 9999;
  font-family: var(--bb-font-family);
}

/* Position variants */
.bb-chat-container[data-position="bottom-right"] {
  bottom: 20px;
  right: 20px;
}

.bb-chat-container[data-position="bottom-left"] {
  bottom: 20px;
  left: 20px;
}

.bb-chat-container[data-position="top-right"] {
  top: 20px;
  right: 20px;
}

.bb-chat-container[data-position="top-left"] {
  top: 20px;
  left: 20px;
}

/* Chat Button */
.bb-chat-button {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: var(--bb-primary-color);
  color: white;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: var(--bb-shadow);
  transition: all 0.3s ease;
}

.bb-chat-button:hover {
  transform: scale(1.05);
}

.bb-chat-button-icon {
  width: 24px;
  height: 24px;
}

/* Chat Popup */
.bb-chat-popup {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 350px;
  height: 500px;
  border-radius: var(--bb-border-radius);
  background-color: var(--bb-background-color);
  box-shadow: var(--bb-shadow);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  transition: all 0.3s ease;
}

.bb-chat-container[data-position="bottom-left"] .bb-chat-popup {
  right: auto;
  left: 0;
}

.bb-chat-container[data-position="top-right"] .bb-chat-popup {
  bottom: auto;
  top: 80px;
}

.bb-chat-container[data-position="top-left"] .bb-chat-popup {
  bottom: auto;
  top: 80px;
  right: auto;
  left: 0;
}

/* Chat Header */
.bb-chat-header {
  background-color: var(--bb-primary-color);
  color: white;
  padding: 15px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.bb-chat-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  overflow: hidden;
  margin-right: 10px;
}

.bb-chat-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.bb-chat-bot-info {
  flex: 1;
}

.bb-chat-bot-name {
  font-weight: bold;
  font-size: 14px;
}

.bb-chat-bot-status {
  font-size: 12px;
  opacity: 0.8;
}

.bb-chat-close-button {
  background: none;
  border: none;
  color: white;
  cursor: pointer;
  padding: 5px;
}

/* Messages Container */
.bb-chat-messages {
  flex: 1;
  padding: 15px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}

/* Message Styles */
.bb-chat-message {
  margin-bottom: 10px;
  max-width: 80%;
  padding: 10px 15px;
  border-radius: var(--bb-border-radius);
  position: relative;
}

.bb-bot-message {
  align-self: flex-start;
  background-color: var(--bb-secondary-color);
  color: var(--bb-text-color);
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.bb-user-message {
  align-self: flex-end;
  background-color: var(--bb-primary-color);
  color: white;
}

.bb-message-time {
  font-size: 10px;
  opacity: 0.7;
  margin-top: 5px;
  text-align: right;
}

/* Typing Indicator */
.bb-typing-indicator .bb-message-content {
  padding: 10px 0;
}

.bb-typing-dots {
  display: flex;
  align-items: center;
}

.bb-typing-dots span {
  width: 8px;
  height: 8px;
  margin: 0 2px;
  background-color: rgba(0, 0, 0, 0.3);
  border-radius: 50%;
  display: inline-block;
  animation: bb-typing 1.4s infinite ease-in-out both;
}

.bb-typing-dots span:nth-child(1) {
  animation-delay: -0.32s;
}

.bb-typing-dots span:nth-child(2) {
  animation-delay: -0.16s;
}

@keyframes bb-typing {
  0%, 80%, 100% { 
    transform: scale(0);
  } 40% { 
    transform: scale(1.0);
  }
}

/* Input Area */
.bb-chat-input-area {
  padding: 15px;
  display: flex;
  align-items: center;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  background-color: white;
}

.bb-chat-input {
  flex: 1;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 20px;
  padding: 10px 15px;
  outline: none;
  font-family: var(--bb-font-family);
}

.bb-chat-input:focus {
  border-color: var(--bb-primary-color);
}

.bb-chat-send-button {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: var(--bb-primary-color);
  color: white;
  border: none;
  margin-left: 10px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
}

.bb-chat-send-button svg {
  width: 16px;
  height: 16px;
}

/* Mobile Responsiveness */
@media (max-width: 480px) {
  .bb-chat-popup {
    width: calc(100vw - 40px);
    height: 60vh;
    bottom: 70px;
  }
  
  .bb-chat-container[data-position="bottom-left"] .bb-chat-popup,
  .bb-chat-container[data-position="bottom-right"] .bb-chat-popup {
    left: 20px;
    right: 20px;
  }
  
  .bb-chat-container[data-position="top-left"] .bb-chat-popup,
  .bb-chat-container[data-position="top-right"] .bb-chat-popup {
    left: 20px;
    right: 20px;
    top: 70px;
  }
}
